package org.rdswitchboard.importers.google.cache;

import java.io.File;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.TimeZone;
import java.util.UUID;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.rdswitchboard.utils.google.cache2.Link;
import org.rdswitchboard.utils.google.cache2.Result;

import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.PrimaryKey;
import com.amazonaws.services.dynamodbv2.document.Table;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3Client;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.util.StringUtils;

public class Importer {

	private JAXBContext jaxbContext;
	private Unmarshaller jaxbUnmarshaller;
	
	private AmazonS3 s3client;
	private DynamoDB dynamoDB;
	private Table searchRequest;
	private Table searchResult;
	
	private File cacheFolder;
	private File dataFolder;
	private File metadataFolder;
	private File linksFolder;
	
	private String bucket;
	private String htmlPath;
	private String metadataPath;
	
	private SimpleDateFormat dateFormatter;
	
	public Importer(Properties properties) throws JAXBException {
		String accessKey = properties.getProperty("aws.access.key");
        String secretKey = properties.getProperty("aws.secret.key");
        
        if (StringUtils.isNullOrEmpty(accessKey) || StringUtils.isNullOrEmpty(secretKey))
        	throw new IllegalArgumentException("S3 access key and secret key can not be empty");
        		
        AWSCredentials awsCredentials = new BasicAWSCredentials(accessKey, secretKey);
		s3client = new AmazonS3Client(awsCredentials);
		dynamoDB = new DynamoDB((AmazonDynamoDB) new AmazonDynamoDBClient(awsCredentials)
		.withRegion(Region.getRegion(Regions.US_WEST_2)));
		
	
		searchRequest = dynamoDB.getTable("SearchResult");
		searchResult = dynamoDB.getTable("SearchResult");
		
		String searchCache = properties.getProperty("search.cache");
		if (StringUtils.isNullOrEmpty(accessKey))
			throw new IllegalArgumentException("Cache Folder Path can not be empty");
		
		cacheFolder = new File(searchCache);
		if (!cacheFolder.exists()) 
			throw new IllegalArgumentException("Invalid Search Cache folder: " + cacheFolder.toString());
		
		dataFolder = new File(cacheFolder + "/data");
		if (!dataFolder.exists())
			throw new IllegalArgumentException("Invalid Search Cache Data folder: " + dataFolder.toString());
			
		metadataFolder = new File(cacheFolder + "/metadata");
		if (!metadataFolder.exists())
			throw new IllegalArgumentException("Invalid Search Cache Metadata folder: " + metadataFolder.toString());

		linksFolder = new File(cacheFolder + "/link");
		if (!linksFolder.exists())
			throw new IllegalArgumentException("Invalid Search Cache Link folder: " + linksFolder.toString());
	
		jaxbContext = JAXBContext.newInstance(Link.class, Result.class);
		jaxbUnmarshaller = jaxbContext.createUnmarshaller();
		
		dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
		dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));
		
		bucket = properties.getProperty("s3.bucket", "search.rd-swithboard");
		htmlPath = properties.getProperty("s3.html.key", "html/");
		metadataPath = properties.getProperty("s3.metadata.key", "metadata/");
		
		System.out.println("Importing Google cahce");
		System.out.println("Cache folder: " + cacheFolder);
		System.out.println("Links folder: " + linksFolder);
		System.out.println("HTML folder: " + dataFolder);
		System.out.println("Metadata folder: " + metadataFolder);
		System.out.println("S3 Bucket: " + bucket);
		System.out.println("S3 HTML Key: " + htmlPath + "*.dat");
		System.out.println("S3 Metadata Key: " + metadataPath + "*.json");
	}
	
	public void process(String cacheType) throws JAXBException, FileNotFoundException {
		File cache = new File (cacheFolder + "/" + cacheType);
		if (!cache.exists()) 
			throw new IllegalArgumentException("Invalid folder: " + cache.toString());
		
		System.out.println("Processing request folder: " + cache);
		
		File[] files = cache.listFiles();
		for (File file : files) 
			if (!file.isDirectory()) {
				Result result = (Result) jaxbUnmarshaller.unmarshal(file);
					
				System.out.println("Processing request: " + result.getText());
				
				for (String linkPath : result.getLinks()) {
					File linkFile = new File (linksFolder + "/" + linkPath);
					
					Link link = (Link) jaxbUnmarshaller.unmarshal(linkFile);
					
					// check if we already have stored this URL
					if (!resultExists(link.getLink())) {
						File dataFile = new File(dataFolder + "/" + link.getData());
						if (!dataFile.exists())
							throw new FileNotFoundException("Unable to found file: " + dataFile);
						File metadataFile = new File(metadataFolder + "/" + link.getMetadata());
						if (!metadataFile.exists())
							throw new FileNotFoundException("Unable to found file: " + metadataFile);
						
						UUID id = UUID.randomUUID();
						
						System.out.println("Importing URL: " + link.getLink() + " with UUID: {" + id + "}");
						// We might want to test is key already exists in the bucket here
						
						String htmlName = id + ".dat";
						String metadataName = id + ".json";
						
						s3client.putObject(new PutObjectRequest(bucket, htmlPath + htmlName, dataFile));
						s3client.putObject(new PutObjectRequest(bucket, metadataPath + metadataName, metadataFile));
						
						Item itemResult = new Item()
			    			.withPrimaryKey("URL", link.getLink())
			    			.withString("HTML", htmlName)
							.withString("Metadata", metadataName)
							.withString("ImportedDate", dateFormatter.format(new Date()));
						
						searchResult.putItem(itemResult);							
					}
				}
				
				Item itemRequest = new Item()
	    			.withPrimaryKey("Request", result.getText())
	    			.withStringSet("Links", result.getLinks());
		
				searchRequest.putItem(itemRequest);	
			}
	}
	
	private boolean resultExists(String url) {
		try {
			return searchResult.getItem(new PrimaryKey().addComponent("URL", url)) != null;
		} catch(Exception e) {
			return false;
		}
	}
	
	/*
	private String generateRandomString(int length) {
		char[] buf = new char[length];
		for (int i = 0; i < length; ++i) {
			int n = random.nextInt(38);
			if (n < 10)
				buf[i] = (char) ('0' + (char) n);
			else
				buf[i] = (char) ('A' + (char) (n - 10));
		}
		
		return new String(buf);	
	}*/
}
